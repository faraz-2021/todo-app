{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/paractice/todo-app/src/todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport ClearOutlinedIcon from '@material-ui/icons/ClearOutlined';\nimport { borderRadius } from '@material-ui/system';\n\nconst Todo = () => {\n  _s();\n\n  const [text, setText] = useState('');\n  const [activeCount, setactiveCount] = useState(0);\n  const [list, setList] = useState([]);\n  const [filterlist, setFilterList] = useState([]);\n  const [editable, setEditable] = useState(false);\n  useEffect(() => {\n    if (filterlist.length) {\n      const updatedActiveCount = filterlist.filter(val => !val.check);\n      setactiveCount(updatedActiveCount.length || 0);\n    }\n  }, [filterlist]);\n\n  const textChange = e => {\n    setText(e.target.value);\n  };\n\n  const showResult = e => {\n    if (text.trim().length > 0) {\n      setList([...list, {\n        text: text.trim(),\n        check: false,\n        id: Math.random().toString()\n      }]);\n      setFilterList([...list, {\n        text: text,\n        check: false,\n        id: Math.random().toString()\n      }]);\n    } else {\n      alert('List can\\'t\\ be empty', 'List name cannot be empty', [{\n        text: 'OK',\n        onPress: () => console.log('alert closed')\n      }]);\n    }\n\n    setText('');\n    e.preventDefault();\n  };\n\n  const setCheck = item => {\n    const newList = list.map(todo => {\n      if (todo.id === item.id) {\n        // console.log(item.id, todo.id)\n        return { ...todo,\n          check: !todo.check\n        };\n      } else {\n        return { ...todo\n        };\n      }\n    });\n    const checkAllChecked = newList.filter(val => val.check);\n\n    if (checkAllChecked.length === newList.length) {\n      setEditable(true);\n    }\n\n    setList(newList);\n    setFilterList(newList);\n  }; // For deleting a item from list\n\n\n  const removeList = id => {\n    const updatedList = list.filter(item => item.id !== id);\n    setList(updatedList);\n    setFilterList(updatedList);\n  }; // Show all the items in the List\n\n\n  const allList = () => {\n    setList(filterlist);\n  }; // Show all the completed items in the list\n\n\n  const completeList = () => {\n    let listData = filterlist.filter(item => {\n      if (item.check) {\n        return item;\n      }\n    });\n    setList(listData);\n  }; // Show all the active items in the list\n\n\n  const activeList = () => {\n    const listData = filterlist.filter(item => {\n      if (!item.check) {\n        return item;\n      }\n    });\n    setList(listData);\n  }; // Delete all the completed list from original list\n\n\n  const onComplete = () => {\n    const finalData = filterlist.filter(item => {\n      if (!item.check) {\n        return item;\n      }\n    });\n    setList(finalData);\n    setFilterList(finalData);\n  }; // To select/unselect all the items in the list\n\n\n  const selectAll = () => {\n    const listUpadte = [...list];\n    const updatedList = listUpadte.map(val => {\n      return { ...val,\n        check: !editable\n      };\n    });\n    setList(updatedList);\n    setFilterList(updatedList);\n    setEditable(!editable);\n  };\n\n  const editListText = (e, id) => {\n    // console.log(e.target.value)\n    e.preventDefault(); // setText(e.target.value)\n    //console.log(e.target.value,id)\n\n    const RemovedList = list.map((item, i) => {\n      if (i === id) {\n        return { ...item,\n          text: e.target.value\n        };\n      } else {\n        return { ...item\n        };\n      }\n    });\n    setList(RemovedList);\n  };\n\n  const fixText = e => {\n    e.preventDefault();\n    setText('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_subDiv\",\n      children: [filterlist.length > 0 && /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {\n        onClick: selectAll,\n        className: \"form_button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_Div\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"input_form\",\n          onSubmit: showResult,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input_field\",\n            type: \"text\",\n            placeholder: \"What needs to be done?\",\n            value: text,\n            onChange: textChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), list.map((item, id) => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: fixText,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list_div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_checkBox\",\n          type: \"checkbox\",\n          checked: item.check,\n          onChange: () => setCheck(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this), item.check ? /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"anchor_tag\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"del\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"anchor_inputBox\",\n              type: \"text\",\n              value: item.text,\n              onChange: e => editListText(e, id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"span_inputBox\",\n            type: \"text\",\n            value: item.text,\n            onChange: e => editListText(e, id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(ClearOutlinedIcon, {\n          onClick: () => removeList(item.id),\n          className: \"button_list\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }, this)), filterlist.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footerDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"footerspan\",\n        children: [\" \", activeCount, \" item left\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: allList,\n        className: \"footerBtn_1\",\n        color: \"black\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: activeList,\n        className: \"footerBtn_1\",\n        color: \"black\",\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: completeList,\n        className: \"footerBtn_1\",\n        color: \"black\",\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onComplete,\n        className: \"footerBtn_2\",\n        color: \"black\",\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Todo, \"gz8opGVJuyGrx44zksplHa38lHU=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/var/www/paractice/todo-app/src/todo.js"],"names":["React","useState","useEffect","KeyboardArrowDownIcon","ClearOutlinedIcon","borderRadius","Todo","text","setText","activeCount","setactiveCount","list","setList","filterlist","setFilterList","editable","setEditable","length","updatedActiveCount","filter","val","check","textChange","e","target","value","showResult","trim","id","Math","random","toString","alert","onPress","console","log","preventDefault","setCheck","item","newList","map","todo","checkAllChecked","removeList","updatedList","allList","completeList","listData","activeList","onComplete","finalData","selectAll","listUpadte","editListText","RemovedList","i","fixText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport ClearOutlinedIcon from '@material-ui/icons/ClearOutlined';\nimport { borderRadius } from '@material-ui/system';\nconst Todo = () => {\n    const [text, setText] = useState('');\n    const [activeCount, setactiveCount] = useState(0);\n    const [list, setList] = useState([]);\n    const [filterlist, setFilterList] = useState([]);\n    const [editable, setEditable] = useState(false);\n    useEffect(() => {\n        if (filterlist.length) {\n            const updatedActiveCount = filterlist.filter(val => !val.check)\n            setactiveCount(updatedActiveCount.length || 0)\n        }\n    }, [filterlist])\n    const textChange = (e) => {\n        setText(e.target.value);\n    }\n    const showResult = e => {\n        if (text.trim().length > 0) {\n            setList([...list, { text: text.trim(), check: false, id: Math.random().toString() }])\n            setFilterList([...list, { text: text, check: false, id: Math.random().toString() }])\n        }\n        else {\n            alert('List can\\'t\\ be empty', 'List name cannot be empty', [\n                { text: 'OK', onPress: () => console.log('alert closed') }\n            ]);\n        }\n        setText('');\n        e.preventDefault();\n    }\n    const setCheck = (item) => {\n        const newList = list.map(todo => {\n            if (todo.id === item.id) {\n                // console.log(item.id, todo.id)\n                return { ...todo, check: !todo.check }\n            } else {\n                return { ...todo }\n            }\n        })\n        const checkAllChecked = newList.filter(val => val.check)\n        if (checkAllChecked.length === newList.length) {\n            setEditable(true)\n        }\n        setList(newList);\n        setFilterList(newList)\n    }\n    // For deleting a item from list\n    const removeList = (id) => {\n        const updatedList = list.filter(item => item.id !== id)\n        setList(updatedList);\n        setFilterList(updatedList)\n    }\n    // Show all the items in the List\n    const allList = () => {\n        setList(filterlist);\n    }\n    // Show all the completed items in the list\n    const completeList = () => {\n        let listData = filterlist.filter(item => {\n            if (item.check) {\n                return item\n            }\n        })\n        setList(listData)\n    }\n    // Show all the active items in the list\n    const activeList = () => {\n        const listData = filterlist.filter(item => {\n            if (!item.check) {\n                return item\n            }\n        })\n        setList(listData)\n    }\n    // Delete all the completed list from original list\n    const onComplete = () => {\n        const finalData = filterlist.filter(item => {\n            if (!item.check) {\n                return item\n            }\n        })\n        setList(finalData)\n        setFilterList(finalData)\n    }\n    // To select/unselect all the items in the list\n    const selectAll = () => {\n        const listUpadte = [...list]\n        const updatedList = listUpadte.map(val => {\n            return { ...val, check: !editable }\n        })\n        setList(updatedList);\n        setFilterList(updatedList)\n        setEditable(!editable)\n    }\n    const editListText = (e, id) => {\n        // console.log(e.target.value)\n        e.preventDefault();\n        // setText(e.target.value)\n        //console.log(e.target.value,id)\n        const RemovedList = list.map((item, i) => {\n            if (i === id) {\n                return { ...item, text: e.target.value }\n            }\n            else {\n                return { ...item }\n            }\n        })\n        setList(RemovedList)\n    }\n    const fixText = (e) => {\n        e.preventDefault();\n        setText('')\n    }\n    return (\n        <div className=\"mainDiv\">\n            <div className=\"main_subDiv\">\n                {filterlist.length > 0 &&\n                    <KeyboardArrowDownIcon onClick={selectAll} className=\"form_button\" />\n                }\n                <div className=\"form_Div\">\n                    <form className=\"input_form\" onSubmit={showResult}>\n                        <input\n                            className=\"input_field\"\n                            type=\"text\"\n                            placeholder=\"What needs to be done?\"\n                            value={text}\n                            onChange={textChange}\n                        />\n                    </form>\n                </div>\n            </div>\n            {\n                list.map((item, id) =>\n                    <form onSubmit={fixText}>\n                        <div className=\"list_div\" key={id}>\n                            <input\n                                className=\"input_checkBox\"\n                                type=\"checkbox\"\n                                checked={item.check}\n                                onChange={() => setCheck(item)}\n                            />\n                            {\n                                item.check ?\n                                    <a className=\"anchor_tag\"> <del><input className=\"anchor_inputBox\" type=\"text\" value={item.text} onChange={(e) => editListText(e, id)} /></del></a>\n                                    :\n                                    <span ><input className=\"span_inputBox\" type=\"text\" value={item.text} onChange={(e) => editListText(e, id)} /></span>\n                            }\n                            <ClearOutlinedIcon onClick={() => removeList(item.id)} className=\"button_list\"> </ClearOutlinedIcon>\n                            {/* <button type='button' onClick={() => removeList(item.id)} className=\"button_list\">x</button> */}\n                        </div>\n                    </form>\n                )\n            }\n            {\n                filterlist.length > 0 &&\n                <div className=\"footerDiv\">\n                    <span className=\"footerspan\"> {activeCount} item left</span>\n                    <button onClick={allList} className=\"footerBtn_1\" color=\"black\">All</button>\n                    <button onClick={activeList} className=\"footerBtn_1\" color=\"black\">Active</button>\n                    <button onClick={completeList} className=\"footerBtn_1\" color=\"black\">Completed</button>\n                    <button onClick={onComplete} className=\"footerBtn_2\" color=\"black\">Clear Completed</button>\n                </div>\n            }\n        </div >\n    );\n}\nexport default Todo;"]},"metadata":{},"sourceType":"module"}