[{"/var/www/paractice/todo2/todo2/src/index.js":"1","/var/www/paractice/todo2/todo2/src/App.js":"2","/var/www/paractice/todo2/todo2/src/reportWebVitals.js":"3","/var/www/paractice/todo2/todo2/src/todo.js":"4","/var/www/paractice/todo2/todo2/src/Search.js":"5"},{"size":500,"mtime":1611729643264,"results":"6","hashOfConfig":"7"},{"size":243,"mtime":1611731021943,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611729643264,"results":"9","hashOfConfig":"7"},{"size":6509,"mtime":1611735679416,"results":"10","hashOfConfig":"7"},{"size":1488,"mtime":1611729643264,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dntoz9",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/var/www/paractice/todo2/todo2/src/index.js",[],["26","27"],"/var/www/paractice/todo2/todo2/src/App.js",["28"],"import './App.css';\nimport Todo from './todo';\nimport Search from './Search';\n\nfunction App() {\n  return (\n    <div style={{display:\"flex\",justifyContent:\"center\"}}>\n     <Todo />\n     {/* <Search /> */}\n    </div>\n  );\n}\n\nexport default App;\n","/var/www/paractice/todo2/todo2/src/reportWebVitals.js",[],"/var/www/paractice/todo2/todo2/src/todo.js",["29","30","31","32","33","34"],"import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport ClearOutlinedIcon from '@material-ui/icons/ClearOutlined';\nimport { borderRadius } from '@material-ui/system';\nconst Todo = () => {\n    const [text, setText] = useState('');\n    const [activeCount, setactiveCount] = useState(0);\n    const [list, setList] = useState([]);\n    const [filterlist, setFilterList] = useState([]);\n    const [editable, setEditable] = useState(false);\n    useEffect(() => {\n        if (filterlist.length) {\n            const updatedActiveCount = filterlist.filter(val => !val.check)\n            setactiveCount(updatedActiveCount.length || 0)\n        }\n    }, [filterlist])\n    const textChange = (e) => {\n        setText(e.target.value);\n    }\n    const showResult = e => {\n        if (text.trim().length > 0) {\n            setList([...list, { text: text.trim(), check: false, id: Math.random().toString() }])\n            setFilterList([...list, { text: text, check: false, id: Math.random().toString() }])\n        }\n        else {\n            alert('List can\\'t\\ be empty', 'List name cannot be empty', [\n                { text: 'OK', onPress: () => console.log('alert closed') }\n            ]);\n        }\n        setText('');\n        e.preventDefault();\n    }\n    const setCheck = (item) => {\n        const newList = list.map(todo => {\n            if (todo.id === item.id) {\n                // console.log(item.id, todo.id)\n                return { ...todo, check: !todo.check }\n            } else {\n                return { ...todo }\n            }\n        })\n        const checkAllChecked = newList.filter(val => val.check)\n        if (checkAllChecked.length === newList.length) {\n            setEditable(true)\n        }\n        setList(newList);\n        setFilterList(newList)\n    }\n    // For deleting a item from list\n    const removeList = (id) => {\n        const updatedList = list.filter(item => item.id !== id)\n        setList(updatedList);\n        setFilterList(updatedList)\n    }\n    // Show all the items in the List\n    const allList = () => {\n        setList(filterlist);\n    }\n    // Show all the completed items in the list\n    const completeList = () => {\n        let listData = filterlist.filter(item => {\n            if (item.check) {\n                return item\n            }\n        })\n        setList(listData)\n    }\n    // Show all the active items in the list\n    const activeList = () => {\n        const listData = filterlist.filter(item => {\n            if (!item.check) {\n                return item\n            }\n        })\n        setList(listData)\n    }\n    // Delete all the completed list from original list\n    const onComplete = () => {\n        const finalData = filterlist.filter(item => {\n            if (!item.check) {\n                return item\n            }\n        })\n        setList(finalData)\n        setFilterList(finalData)\n    }\n    // To select/unselect all the items in the list\n    const selectAll = () => {\n        const listUpadte = [...list]\n        const updatedList = listUpadte.map(val => {\n            return { ...val, check: !editable }\n        })\n        setList(updatedList);\n        setFilterList(updatedList)\n        setEditable(!editable)\n    }\n    const editListText = (e, id) => {\n        // console.log(e.target.value)\n        e.preventDefault();\n        // setText(e.target.value)\n        //console.log(e.target.value,id)\n        const RemovedList = list.map((item, i) => {\n            if (i === id) {\n                return { ...item, text: e.target.value }\n            }\n            else {\n                return { ...item }\n            }\n        })\n        setList(RemovedList)\n    }\n    const fixText = (e) => {\n        e.preventDefault();\n        setText('')\n    }\n    return (\n        <div className=\"mainDiv\">\n            <div className=\"main_subDiv\">\n                {filterlist.length > 0 &&\n                    <KeyboardArrowDownIcon onClick={selectAll} className=\"form_button\" />\n                }\n                <div className=\"form_Div\">\n                    <form className=\"input_form\" onSubmit={showResult}>\n                        <input\n                            className=\"input_field\"\n                            type=\"text\"\n                            placeholder=\"What needs to be done?\"\n                            value={text}\n                            onChange={textChange}\n                        />\n                    </form>\n                </div>\n            </div>\n            {\n                list.map((item, id) =>\n                    <form onSubmit={fixText}>\n                        <div className=\"list_div\" key={id}>\n                            <input\n                                className=\"input_checkBox\"\n                                type=\"checkbox\"\n                                checked={item.check}\n                                onChange={() => setCheck(item)}\n                            />\n                            {\n                                item.check ?\n                                    <a className=\"anchor_tag\"> <del><input className=\"anchor_inputBox\" type=\"text\" value={item.text} onChange={(e) => editListText(e, id)} /></del></a>\n                                    :\n                                    <span ><input className=\"span_inputBox\" type=\"text\" value={item.text} onChange={(e) => editListText(e, id)} /></span>\n                            }\n                            <ClearOutlinedIcon onClick={() => removeList(item.id)} className=\"button_list\"> </ClearOutlinedIcon>\n                            {/* <button type='button' onClick={() => removeList(item.id)} className=\"button_list\">x</button> */}\n                        </div>\n                    </form>\n                )\n            }\n            {\n                filterlist.length > 0 &&\n                <div className=\"footerDiv\">\n                    <span className=\"footerspan\"> {activeCount} item left</span>\n                    <button onClick={allList} className=\"footerBtn_1\" color=\"black\">All</button>\n                    <button onClick={activeList} className=\"footerBtn_1\" color=\"black\">Active</button>\n                    <button onClick={completeList} className=\"footerBtn_1\" color=\"black\">Completed</button>\n                    <button onClick={onComplete} className=\"footerBtn_2\" color=\"black\">Clear Completed</button>\n                </div>\n            }\n        </div >\n    );\n}\nexport default Todo;","/var/www/paractice/todo2/todo2/src/Search.js",["35"],"import React, {useState} from 'react'\nconst initialList = [\n  'Learn React',\n  'Learn Firebase',\n  'Learn GraphQL',\n];\n \nconst Search = () => {\n  const [value, setValue] = React.useState('');\n  const [list, setList] = React.useState(initialList);\n \n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n \n  const handleSubmit = event => {\n    if (value) {\n      setList(list.concat(value));\n    }\n \n    setValue('');\n \n    event.preventDefault();\n  };\n \n  return (\n    <div>\n      <ul>\n        {list.map(item => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n \n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={value} onChange={handleChange} />\n        <button type=\"submit\">Add Item</button>\n      </form>\n    </div>\n  );\n};\n \nexport default Search;\n\n// const Search = () => {\n\n//   const [input, setInput] = useState('');\n//   return (\n//     <div>\n//     <label>Please specify:</label>\n//     <input value={input} onInput={e => setInput(e.target.value)}/>\n//     </div>\n//   );\n// }\n    // const [showResults, setShowResults] = React.useState(false)\n    // const onClick = () => setShowResults(true)\n    // return (\n    //   <div>\n    //     <input type=\"submit\" value=\"Search\" onClick={onClick} />\n    //     { showResults ? <Results /> : null }\n    //   </div>\n    // )\n  \n  \n  // const Results = () => (\n  //   <div id=\"results\" className=\"search-results\">\n  //     Some Results\n  //   </div>\n  // )\n\n// export default Search;",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":14},{"ruleId":"40","severity":1,"message":"44","line":5,"column":10,"nodeType":"42","messageId":"43","endLine":5,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":27,"column":31,"nodeType":"47","messageId":"48","endLine":27,"endColumn":32,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":62,"column":47,"nodeType":"52","messageId":"53","endLine":62,"endColumn":49},{"ruleId":"50","severity":1,"message":"51","line":71,"column":49,"nodeType":"52","messageId":"53","endLine":71,"endColumn":51},{"ruleId":"50","severity":1,"message":"51","line":80,"column":50,"nodeType":"52","messageId":"53","endLine":80,"endColumn":52},{"ruleId":"54","severity":1,"message":"55","line":147,"column":37,"nodeType":"56","endLine":147,"endColumn":63},{"ruleId":"40","severity":1,"message":"57","line":1,"column":16,"nodeType":"42","messageId":"43","endLine":1,"endColumn":24},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'borderRadius' is defined but never used.","no-useless-escape","Unnecessary escape character: \\ .","Literal","unnecessaryEscape",["60","61"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"62","fix":"63","desc":"64"},{"messageId":"65","fix":"66","desc":"67"},"removeEscape",{"range":"68","text":"69"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"70","text":"71"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1143,1144],"",[1143,1143],"\\"]